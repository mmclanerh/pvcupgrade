#!/bin/sh

short_date=$(/bin/date +%m%d%y)
DLOG="${HOME}/pvcmove-debug.${short_date}.log"
LOG="${HOME}/pvcmove.log"
exec 100>>${DLOG}
BASH_XTRACEFD=100
set -x
date -u

if [ -z "${1}" ]; then
  echo "Need project name"
  set +xv
  exit 1
fi

if [ -z "${2}" ]; then
  echo "Need pv claim name"
  set +xv
  exit 1
fi

if [ -z "${3}" ]; then
  echo "Need new pv claim class" 
  set +xv
  exit 1
fi

project="${1}"
pvcname="${2}"
pvcclass="${3}"

case ${project} in
  *-che)
    service=che
    ;;
  *-jenkins)
    service=jenkins
    ;;
  *-run)
    service=run
    ;;
  *-stage)
    service=stage
    ;;
  *)
    service=build
    ;;
esac
tenant=$(echo ${project} | sed -e 's/\(-jenkins$\|-che$\|-run$\|-stage$\)//')

function log () {
  echo "`date -u` (${project}:${pvcname}:${action}) ${*}" | tee -a ${LOG}
}
function logsentry () {
    if [ ! -z "${SENTRY_DSN}" ]; then
      sentry-cli send-event --logfile ${DLOG} --message "${1}" --tag pvcname:${pvcname} --tag project:${project} --tag tenant:${tenant} --tag service:${service} --no-environ
    fi
}

function do_debug () {
  echo "########### ${project}:events"
  oc -n ${project} get events | tail -n5
  echo "########### ${project}:dc,rc,po,pvc"
  oc -n ${project} get dc,rc,po,pvc
}

function statuscheck () {
  if [ ${1} -ne 0 ]; then
    log "Non-zero (${1}) return, check debug log ${DLOG}"
    logsentry "Command returned error, exiting"
    exit 1
  fi
}

function get_lastestdcversion () {
  dcname="${1}"
  OUT=$(oc -n ${project} get dc/${dcname} -o jsonpath='{.status.latestVersion}')
  statuscheck $?
  echo ${OUT}
}

function add_movedc () {
  dcname="$1"
  src="$2"
  dst="$3"
  oc process -f pvcmove.template.yml -p TEMPLATE_NAME=${dcname} -p SOURCE_VOLUME=${src} -p DEST_VOLUME="${dst}" | oc -n ${project} create -f -
  statuscheck $?
  oc -n ${project} rollout resume dc/${dcname}
  statuscheck $?
  LATEST_DC=$(get_lastestdcversion)
}

function del_movedc () {
  dcname="$1"
  oc -n ${project} delete dc/${dcname} 2>&1
  statuscheck $?
}

function add_pvc () {
  pvc="$1"
  oc process -f new_pvc.template.yml -p PVC_NAME="${pvc}" -p STORAGE_CLASS=${pvcclass} | oc -n ${project} create -f -
  statuscheck $?
}

function del_pvc () {
  pvc="$1"
  oc -n ${project} delete pvc/${pvc}
  statuscheck $?
}

function update_quota () {
  oc -n ${project} patch -f ${HOME}/quotas/${service}.quota.increase.yaml
  statuscheck $?
}

function reset_quota () {
  oc -n ${project} patch -f ${HOME}/quotas/${service}.quota.yaml
  statuscheck $?
}

log "Begin pvc move for project \"${project}\", pvc \"${pvcname}\" to class \"${pvcclass}\""

action="Create temp PVC"
add_pvc temp-${pvcname}
action="Update quota"
action="Add temp copy DC"
add_movedc pvcmove ${pvcname} temp-${pvcname}
do_debug
action="Copy data to temp PVC"
action="Remove temp copy DC"
action="Remove original PVC"
action="Add new PVC"
action="Add new copy DC"
action="Copy data to new PVC"
action="Remove new copy DC"
action="Remove temp PVC"
action="Restore quota"

set +xv
echo "# debug: ${DLOG}"
